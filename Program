using System;
using System.Linq;

namespace lambdaExpressions
{
    class Program
    {
        static void Main(string[] args)
        {
            // lambda expression without inputs
            Func<string> greet1 = () => "Hello, World!";
            Console.WriteLine(greet1());


            //
            string[] words = { "bot", "apple", "apricot" };
            int minimalLength = words
              .Where(w => w.StartsWith("a"))
              .Min(w => w.Length);
            Console.WriteLine(minimalLength);   // output: 5

            //
            int[] numbers1 = { 4, 7, 10 };
            int product = numbers1.Aggregate(1, (interim, next) => interim * next);
            Console.WriteLine(product);   // output: 280

            // lambda as function (which returns result), 
            // the first types are always the input parameters, the last type is always the result
            Func<int, int> square = x => x * x;
            Console.WriteLine(square(5));    // output: 25

            // 
            Func<double, double>  squareDouble = x => x * x;
            Console.WriteLine(squareDouble(5.5));    // output: 30.25

            // lambda as action (which doesn't return anything)
            Action<string> greet2 = name =>
            {
                string greeting = $"Hello {name}!";
                Console.WriteLine(greeting);
            };
            greet2("World");    // output: Hello World!

            //
            int[] numbers2 = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
            var firstNumbersLessThanSix = numbers2.TakeWhile(n => n < 6);
            Console.WriteLine(string.Join(" ", firstNumbersLessThanSix));    // Output: 5 4 1 3

            // wait for user
            Console.ReadLine();

        }
    }
}
